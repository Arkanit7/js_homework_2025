/** @type {(list: any[]) => any[]} */
function fisherShuffle(list) {
  for (let i = list.length - 1; i > 0; i--) {
    const randomIndex = Math.floor(Math.random() * (i + 1))

    ;[list[i], list[randomIndex]] = [list[randomIndex], list[i]]
  }

  return list
}

/**
 * @param {string} word - The word to start the iteration on.
 * @returns {() => string | null} A function that returns next word letter.
 */
function useWordIterator(word) {
  if (!word.length) throw new Error('The word is empty.')

  let index = 0

  return () => (index >= word.length ? null : word[index++])
}

/** @type {(correctCount: number, word: string, userLetters: string[]) => void} */
function showInfo(correctCount, word, userLetters) {
  const stats =
    correctCount === word.length
      ? 'üíØ –ú–æ–ª–æ–¥–µ—Ü—å, 100% –≤—ñ—Ä–Ω–æ!'
      : `–í–∏ –≤–≥–∞–¥–∞–ª–∏ ${correctCount} –ª—ñ—Ç–µ—Ä(–∏) –∑ ${word.length}.`

  alert(
    `–ö–æ—Ä–µ–∫—Ç–Ω–µ —Å–ª–æ–≤–æ: ${word}\n–í–∞—à–µ —Å–ª–æ–≤–æ: ${userLetters.join('')}\n${stats}`,
  )
}

/** @type {(word: string, description: string) => number[] | null} */
function playTranslateRound(word, description) {
  const wordIterator = useWordIterator(word)
  let correctCount = 0
  const userLetters = new Array(word.length).fill('_')

  for (let i = 0; i < word.length; i++) {
    const currentLetter = wordIterator()
    const userInput = prompt(
      `üåç –í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –ª—ñ—Ç–µ—Ä—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é:\nüí° –û–ø–∏—Å: "${description}"\n${userLetters.join(' ')}`,
    )

    if (!userInput) return null

    const userLetter = userInput[0].toLowerCase()

    userLetters[i] = userLetter

    if (currentLetter === userLetter) correctCount++
  }

  showInfo(correctCount, word, userLetters)

  return [correctCount, word.length]
}

/** @type {(questions: string[][]) => void} */
function playTranslate(questions) {
  alert('üåé –ü–µ—Ä–µ–∫–ª–∞–¥–∞—á üåç')

  let correctCount = 0
  let totalCount = 0

  for (const question of questions) {
    const stats = playTranslateRound(...question)

    if (!stats) break

    const [answerCorrect, answerTotal] = stats

    correctCount += answerCorrect
    totalCount += answerTotal
  }

  const successRate = totalCount === 0 ? 0 : (correctCount / totalCount) * 100

  alert(
    `ùíä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ùíä\n–í—ñ—Ä–Ω—ñ –ª—ñ—Ç–µ—Ä–∏ ${correctCount} –∑ ${totalCount}\n${successRate.toFixed(2)}%`,
  )
}

const QUIZ_QUESTIONS = [
  ['apple', '–§—Ä—É–∫—Ç, —è–∫–∏–π –∑–∞–∑–≤–∏—á–∞–π —á–µ—Ä–≤–æ–Ω–æ–≥–æ –∞–±–æ –∑–µ–ª–µ–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É.'],
  ['banana', '–î–æ–≤–≥–∏–π –∂–æ–≤—Ç–∏–π —Ñ—Ä—É–∫—Ç, —è–∫–∏–π —Ä–æ—Å—Ç–µ –Ω–∞ –ø–∞–ª—å–º—ñ.'],
  ['car', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± –∑ —á–æ—Ç–∏—Ä–º–∞ –∫–æ–ª–µ—Å–∞–º–∏.'],
  ['dog', '–î–æ–º–∞—à–Ω—è —Ç–≤–∞—Ä–∏–Ω–∞, –Ω–∞–π–∫—Ä–∞—â–∏–π –¥—Ä—É–≥ –ª—é–¥–∏–Ω–∏.'],
  ['sun', '–ó—ñ—Ä–∫–∞, —â–æ –æ—Å–≤—ñ—Ç–ª—é—î –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É.'],
  ['water', '–ü—Ä–æ–∑–æ—Ä–∞ —Ä—ñ–¥–∏–Ω–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –¥–ª—è –∂–∏—Ç—Ç—è.'],
  ['book', '–ó–±—ñ—Ä–Ω–∏–∫ –¥—Ä—É–∫–æ–≤–∞–Ω–∏—Ö –∞–±–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.'],
  ['computer', '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —ñ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.'],
  ['moon', '–ù–µ–±–µ—Å–Ω–µ —Ç—ñ–ª–æ, —â–æ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞–≤–∫–æ–ª–æ –ó–µ–º–ª—ñ.'],
  [
    'bicycle',
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–± –∑ –¥–≤–æ–º–∞ –∫–æ–ª–µ—Å–∞–º–∏, —è–∫–∏–π —Ä—É—Ö–∞—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–µ–¥–∞–ª–µ–π.',
  ],
  ['school', '–ú—ñ—Å—Ü–µ, –¥–µ –¥—ñ—Ç–∏ –≤—á–∞—Ç—å—Å—è —ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–Ω–∞–Ω–Ω—è.'],
  ['river', '–í–µ–ª–∏–∫–∏–π –ø—Ä–∏—Ä–æ–¥–Ω–∏–π –ø–æ—Ç—ñ–∫ –≤–æ–¥–∏, —â–æ —Ç–µ—á–µ –¥–æ –æ–∫–µ–∞–Ω—É –∞–±–æ –æ–∑–µ—Ä–∞.'],
  ['coffee', '–ü–æ–ø—É–ª—è—Ä–Ω–∏–π –≥–∞—Ä—è—á–∏–π –Ω–∞–ø—ñ–π, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∫–æ—Ñ–µ—ó–Ω.'],
  ['chair', '–ü—Ä–µ–¥–º–µ—Ç –º–µ–±–ª—ñ–≤, –Ω–∞ —è–∫–æ–º—É –º–æ–∂–Ω–∞ —Å–∏–¥—ñ—Ç–∏.'],
  ['phone', '–ü—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ —ñ –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.'],
]

if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
  fisherShuffle(QUIZ_QUESTIONS)
  playTranslate(QUIZ_QUESTIONS)
}
